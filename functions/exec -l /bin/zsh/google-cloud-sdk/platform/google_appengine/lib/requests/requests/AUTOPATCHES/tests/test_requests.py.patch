@@
 """Tests for Requests."""
 
+<<<<<<< /usr/local/google/home/byoshimi/copybara/temp/workdir15795651501202885381/checkout/google3/third_party/py/requests/tests/test_requests.py
 import collections
 import contextlib
 import io
+||||||| /usr/local/google/home/byoshimi/copybara/temp/workdir15795651501202885381/baseline/google3/third_party/py/requests/tests/test_requests.py
+from __future__ import division
+=======
+from __future__ import division
+import io
+>>>>>>> /usr/local/google/home/byoshimi/copybara/temp/workdir15795651501202885381/destination/google3/third_party/py/requests/tests/test_requests.py
 import json
 import os
 import pickle
@@ from requests.models import PreparedRequest, urlencode
 from requests.sessions import SessionRedirectMixin
 from requests.structures import CaseInsensitiveDict
 
+<<<<<<< /usr/local/google/home/byoshimi/copybara/temp/workdir15795651501202885381/checkout/google3/third_party/py/requests/tests/test_requests.py
 from . import SNIMissingWarning
 from .compat import StringIO
 from .utils import override_environ
@@ from .utils import override_environ
 # Requests to this URL should always fail with a connection timeout (nothing
 # listening on that port)
 TARPIT = "http://10.255.255.1"
+||||||| /usr/local/google/home/byoshimi/copybara/temp/workdir15795651501202885381/baseline/google3/third_party/py/requests/tests/test_requests.py
+from .compat import StringIO, u
+from .utils import override_environ
+from urllib3.util import Timeout as Urllib3Timeout
+
+# Requests to this URL should always fail with a connection timeout (nothing
+# listening on that port)
+TARPIT = 'http://10.255.255.1'
+=======
+from requests.tests.compat import StringIO, u
+from requests.tests.utils import override_environ
+import urllib3
+Urllib3Timeout = urllib3.util.Timeout
+>>>>>>> /usr/local/google/home/byoshimi/copybara/temp/workdir15795651501202885381/destination/google3/third_party/py/requests/tests/test_requests.py
 
 # This is to avoid waiting the timeout of using TARPIT
 INVALID_PROXY = "http://localhost:1"
@@ class TestRequests:
         post1 = requests.post(url, data={"some": "data"})
         assert post1.status_code == 200
 
+<<<<<<< /usr/local/google/home/byoshimi/copybara/temp/workdir15795651501202885381/checkout/google3/third_party/py/requests/tests/test_requests.py
         with open("requirements-dev.txt") as f:
             post2 = requests.post(url, files={"some": f})
+||||||| /usr/local/google/home/byoshimi/copybara/temp/workdir15795651501202885381/baseline/google3/third_party/py/requests/tests/test_requests.py
+        with open('requirements-dev.txt') as f:
+            post2 = requests.post(url, files={'some': f})
+=======
+        with io.StringIO('dummy_string') as f:
+            post2 = requests.post(url, files={'some': f})
+>>>>>>> /usr/local/google/home/byoshimi/copybara/temp/workdir15795651501202885381/destination/google3/third_party/py/requests/tests/test_requests.py
         assert post2.status_code == 200
 
         post4 = requests.post(url, data='[{"some": "json"}]')
@@ class TestRequests:
         post1 = requests.post(url, data={"some": "data"})
         assert post1.status_code == 200
 
+<<<<<<< /usr/local/google/home/byoshimi/copybara/temp/workdir15795651501202885381/checkout/google3/third_party/py/requests/tests/test_requests.py
         with open("requirements-dev.txt") as f:
             post2 = requests.post(url, data={"some": "data"}, files={"some": f})
+||||||| /usr/local/google/home/byoshimi/copybara/temp/workdir15795651501202885381/baseline/google3/third_party/py/requests/tests/test_requests.py
+        with open('requirements-dev.txt') as f:
+            post2 = requests.post(url, data={'some': 'data'}, files={'some': f})
+=======
+        with io.StringIO('dummy_string') as f:
+            post2 = requests.post(url, data={'some': 'data'}, files={'some': f})
+>>>>>>> /usr/local/google/home/byoshimi/copybara/temp/workdir15795651501202885381/destination/google3/third_party/py/requests/tests/test_requests.py
         assert post2.status_code == 200
 
         post4 = requests.post(url, data='[{"some": "json"}]')
@@ class TestRequests:
         assert found_json == {"some": "data"}
 
     def test_conflicting_post_params(self, httpbin):
+<<<<<<< /usr/local/google/home/byoshimi/copybara/temp/workdir15795651501202885381/checkout/google3/third_party/py/requests/tests/test_requests.py
         url = httpbin("post")
         with open("requirements-dev.txt") as f:
+||||||| /usr/local/google/home/byoshimi/copybara/temp/workdir15795651501202885381/baseline/google3/third_party/py/requests/tests/test_requests.py
+        url = httpbin('post')
+        with open('requirements-dev.txt') as f:
+            with pytest.raises(ValueError):
+                requests.post(url, data='[{"some": "data"}]', files={'some': f})
+=======
+        url = httpbin('post')
+        with io.StringIO('dummy_string') as f:
+            with pytest.raises(ValueError):
+                requests.post(url, data='[{"some": "data"}]', files={'some': f})
+>>>>>>> /usr/local/google/home/byoshimi/copybara/temp/workdir15795651501202885381/destination/google3/third_party/py/requests/tests/test_requests.py
             with pytest.raises(ValueError):
                 requests.post(url, data='[{"some": "data"}]', files={"some": f})
 
@@ class TestTimeout:
         except ReadTimeout:
             pass
 
+<<<<<<< /usr/local/google/home/byoshimi/copybara/temp/workdir15795651501202885381/checkout/google3/third_party/py/requests/tests/test_requests.py
     @pytest.mark.parametrize(
         "timeout", ((0.1, None), Urllib3Timeout(connect=0.1, read=None))
     )
@@ class TestTimeout:
         except ConnectTimeout:
             pass
 
+||||||| /usr/local/google/home/byoshimi/copybara/temp/workdir15795651501202885381/baseline/google3/third_party/py/requests/tests/test_requests.py
+    @pytest.mark.parametrize(
+        'timeout', (
+            (0.1, None),
+            Urllib3Timeout(connect=0.1, read=None)
+        ))
+    def test_connect_timeout(self, timeout):
+        try:
+            requests.get(TARPIT, timeout=timeout)
+            pytest.fail('The connect() request should time out.')
+        except ConnectTimeout as e:
+            assert isinstance(e, ConnectionError)
+            assert isinstance(e, Timeout)
+
+    @pytest.mark.parametrize(
+        'timeout', (
+            (0.1, 0.1),
+            Urllib3Timeout(connect=0.1, read=0.1)
+        ))
+    def test_total_timeout_connect(self, timeout):
+        try:
+            requests.get(TARPIT, timeout=timeout)
+            pytest.fail('The connect() request should time out.')
+        except ConnectTimeout:
+            pass
+
+=======
+>>>>>>> /usr/local/google/home/byoshimi/copybara/temp/workdir15795651501202885381/destination/google3/third_party/py/requests/tests/test_requests.py
     def test_encoded_methods(self, httpbin):
         """See: https://github.com/psf/requests/issues/2316"""
         r = requests.request(b"GET", httpbin("get"))
